// temporal selection.slim : ^Total mutation frequencies: (.*)$
//
// A test script for temporally varying selection with a fitness() callback
//
initialize() {
	initializeMutationRate(1e-7);
	initializeMutationType("m1", 0.5, "f", 0.0);  // neutral
	initializeMutationType("m2", 0.5, "f", 0.1);  // beneficial
	initializeGenomicElementType("g1", c(m1,m2), c(0.995,0.005));
	initializeGenomicElement(g1, 0, 99999);
	initializeRecombinationRate(1e-8);
}
1 early() { sim.addSubpop("p1", 1000); }
2000:4999 fitness(m2) { return 1.0; }
12000:14999 fitness(m2) { return relFitness * 2.0; }   // no dominance accounting, so causes logjam
20000 late() { cat("\nTotal mutation frequencies: " + sum(sim.mutationFrequencies(NULL)) + "\n"); }
