// simple QTL + neutral.slim : ^Total mutation frequencies: (.*)$
//
// A test script for additive QTLs against a neutral background
//
initialize() {
	initializeMutationRate(1e-5);
	
	// neutral mutations in non-coding regions
	initializeMutationType("m1", 0.5, "f", 0.0);
	initializeGenomicElementType("g1", m1, 1.0);
	
	// mutations representing alleles in QTLs
	scriptForQTLs = "if (runif(1) < 0.5) -1; else 1;";
	initializeMutationType("m2", 0.5, "s", scriptForQTLs);
	initializeGenomicElementType("g2", m2, 1.0);
	m2.convertToSubstitution = F;
	m2.mutationStackPolicy = "l";
	
	// marker mutation for QTL effect; superseded by global fitness callbacks in 2.3
	initializeMutationType("m3", 0.5, "f", -0.05);
	m3.convertToSubstitution = F;
	
	// set up our chromosome: 10 QTLs, surrounded by neutral regions
	defineConstant("C", 10);    // number of QTLs
	defineConstant("W", 1000);  // size of neutral buffer on each side
	pos = 0;
	q = NULL;
	
	for (i in 1:C)
	{
		initializeGenomicElement(g1, pos, pos + W-1);
		pos = pos + W;
		
		initializeGenomicElement(g2, pos, pos);
		q = c(q, pos);
		pos = pos + 1;
		
		initializeGenomicElement(g1, pos, pos + W-1);
		pos = pos + W;
	}
	
	defineConstant("Q", q);     // remember our QTL positions
	
	// we want the QTLs to be unlinked; build a recombination map for that
	rates = c(rep(c(1e-8, 0.5), C-1), 1e-8);
	ends = (repEach(Q + W, 2) + rep(c(0,1), C))[0:(C*2 - 2)];
	initializeRecombinationRate(rates, ends);
}
1 early() {
	sim.addSubpop("p1", 500);
	sim.addSubpop("p2", 500);
	
	// set up migration; comment these out for zero gene flow
	p1.setMigrationRates(p2, 0.01);
	p2.setMigrationRates(p1, 0.01);
}
1 late() {
	// optional: give m2 mutations to everyone, as standing variation
	// if this is commented out, QTLs effectively start as 0
	g = sim.subpopulations.genomes;
	n = size(g);
	
	for (q in Q)
	{
		isPlus = asLogical(rbinom(n, 1, 0.5));
		g[isPlus].addNewMutation(m2, 1.0, q);
		g[!isPlus].addNewMutation(m2, -1.0, q);
	}
	
	// give marker mutation to everyone
	sim.subpopulations.individuals.genomes.addNewDrawnMutation(m3, 0);
}
1: late() {
	// construct phenotypes for the additive effects of QTLs
	inds = sim.subpopulations.individuals;
	
	if (isNULL(version()))  // backward compatibility
		inds.tag = apply(inds, "asInteger(sum(applyValue.genomes.mutationsOfType(m2).selectionCoeff));");
	else
		inds.tag = sapply(inds, "asInteger(sum(applyValue.genomes.mutationsOfType(m2).selectionCoeff));");
}
fitness(m2) {
	// the QTLs themselves are neutral; their effect is handled below
	return 1.0;
}
fitness(m3, p1) {
	// optimum of +10
	return 1.0 + dnorm(10.0 - individual.tag, 0.0, 5.0);
}
fitness(m3, p2) {
	// optimum of -10
	return 1.0 + dnorm(-10.0 - individual.tag, 0.0, 5.0);
}
2000 late() { cat("\nTotal mutation frequencies: " + sum(sim.mutationFrequencies(NULL)) + "\n"); }
