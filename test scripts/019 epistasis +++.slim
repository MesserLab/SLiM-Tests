// epistasis.slim : ^Total mutation frequencies: (.*)$
//
// A test script for modeling epistasis with a fitness() callback
//
initialize() {
	initializeMutationRate(1e-8);
	initializeMutationType("m1", 0.5, "f", 0.0);  // neutral
	initializeMutationType("m2", 0.5, "f", 0.1);  // epistatic mut 1
	m2.convertToSubstitution = F;
	initializeMutationType("m3", 0.5, "f", 0.1);  // epistatic mut 2
	m3.convertToSubstitution = F;
	initializeGenomicElementType("g1", m1, 1);
	initializeGenomicElementType("g2", m2, 1);    // epistatic locus 1
	initializeGenomicElementType("g3", m3, 1);    // epistatic locus 2
	initializeGenomicElement(g1, 0, 10000);
	initializeGenomicElement(g2, 10001, 13000);
	initializeGenomicElement(g1, 13001, 70000);
	initializeGenomicElement(g3, 70001, 73000);
	initializeGenomicElement(g1, 73001, 99999);
	initializeRecombinationRate(1e-8);
}
1 early() { sim.addSubpop("p1", 1000); }
// we use callbacks for both mutation types in this test to make the model's runtime symmetric
mutationEffect(m2) {
	if (individual.haploidGenome1.countOfMutationsOfType(m3))
		return 0.5;
	else if (individual.haploidGenome2.countOfMutationsOfType(m3))
		return 0.5;
	else
		return effect;
}
mutationEffect(m3) {
	if (individual.haploidGenome1.countOfMutationsOfType(m2))
		return 0.5;
	else if (individual.haploidGenome2.countOfMutationsOfType(m2))
		return 0.5;
	else
		return effect;
}
5000 late() { cat("\nTotal mutation frequencies: " + sum(sim.mutationFrequencies(NULL)) + "\n"); }
