// introduced sweep.slim : ^Outcome: (.*)$
//
// A test script for modeling a sweep of an introduced mutation
//
initialize() {
	initializeMutationRate(1e-7);
	initializeMutationType("m1", 0.5, "f", 0.0);
	initializeMutationType("m2", 0.65, "f", 0.3);   // introduced mutation
	initializeGenomicElementType("g1", m1, 1.0);
	initializeGenomicElement(g1, 0, 99999);
	initializeRecombinationRate(1e-8);
}
1 {
	subpopCount = 10;
	for (i in 1:subpopCount)
		sim.addSubpop(i, 8000);
	for (i in 2:subpopCount)
		sim.subpopulations[i-1].setMigrationRates(i-1, 0.01);
	for (i in 1:(subpopCount-1))
		sim.subpopulations[i-1].setMigrationRates(i+1, 0.2);
}
100 late() {
	target = sample(p1.genomes, 250);
	
	// use old mutation addition formula for backward compatibility
	mut = target[0].addNewDrawnMutation(m2, 10000);
	target[1:249].addMutations(mut);
}
100:100000 late() {
	if (sim.countOfMutationsOfType(m2) == 0)
	{
		fixed = (sum(sim.substitutions.mutationType == m2) == 1);
		cat(ifelse(fixed, "Outcome: FIXED ", "Outcome: LOST ") + sim.generation + "\n");
		if (exists("community"))
			community.simulationFinished();
		else
			sim.simulationFinished();
	}
}
