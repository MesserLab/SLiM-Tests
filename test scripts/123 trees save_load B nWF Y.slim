// trees save_load B nWF Y.slim : ^### (.+) ###$
//
// Test .trees file save/load (binary, nonWF, sexual 'Y')
//
initialize() {
	defineConstant("seed", getSeed());
	initializeSLiMModelType("nonWF");
	initializeSLiMOptions(dimensionality="xy", periodicity="xy");
	initializeTreeSeq();
	initializeSex("Y");
	defineConstant("K", 50);   // carrying-capacity density
	defineConstant("S", 0.1);   // sigma_S, the spatial interaction width
	
	initializeMutationRate(1e-4);
	initializeMutationType("m1", 0.5, "f", 0.0);
	m1.convertToSubstitution = T;
	initializeMutationType("m2", 0.5, "e", -0.01);
	initializeMutationType("m3", 0.5, "n", 0.01, 0.01);
	initializeGenomicElementType("g1", c(m1,m2,m3), c(1.0,0.1,0.01));
	initializeGenomicElement(g1, 0, 999);
	initializeRecombinationRate(1e-7);
	
	// spatial competition
	initializeInteractionType(1, "xy", reciprocal=T, maxDistance=S * 3);
	i1.setInteractionFunction("n", 1.0, S);
	
	// spatial mate choice
	initializeInteractionType(2, "xy", reciprocal=T, maxDistance=0.3);
}
reproduction(NULL, "F") {
	// choose our nearest neighbor as a mate, within the max distance
	mate = i2.nearestNeighbors(individual, 5);
	if (mate.size()) mate = mate[mate.sex == "M"];
	if (mate.size()) mate = mate[0];
	dest = sample(c(p1,p2), 1);
	
	for (i in seqLen(rpois(1, 2)))
	{
		if (mate.size())
			offspring = dest.addCrossed(individual, mate);
		else
			offspring = dest.addCloned(individual);
		
		// set offspring position
		pos = individual.spatialPosition + rnorm(2, 0, 0.05);
		offspring.setSpatialPosition(p1.pointPeriodic(pos));
	}
}
1 early() {
	sim.addSubpop("p1", 50);
	sim.addSubpop("p2", 50);
	c(p1,p2).setSpatialBounds(c(0.0, 0.0, 1.05, 1.05));
	sim.subpopulations.individuals.setSpatialPosition(p1.pointUniform(100));
	sim.setValue("iter", 0);
}
2: early() {
	ind = sample(sim.subpopulations.individuals, 1);
	sim.treeSeqRememberIndividuals(ind);
}
3000 early() {
	catn("SAVING...");
	sim.treeSeqOutput("/tmp/slim_trees_test.trees", _binary=T);
	setSeed(seed + 1);
}
4000 early() {
	s = sum(sim.mutationCounts(NULL) + sim.substitutions.size());
	catn("s == " + s);
	if (sim.getValue("iter") == 0)
	{
		catn("RESTARTING...");
		sim.setValue("s", s);
		sim.setValue("iter", 1);
		sim.readFromPopulationFile("/tmp/slim_trees_test.trees");
		setSeed(seed + 1);
	}
	else
	{
		if (s == sim.getValue("s"))
			catn("### " + s + " ###");
		else
			catn("### NOT EQUAL ###");
	}
}
early() {
	i1.evaluate();
	
	// spatial competition provides density-dependent selection
	for (subpop in c(p1,p2))
	{
		inds = subpop.individuals;
		competition = i1.totalOfNeighborStrengths(inds);
		competition = competition / (2 * PI * S^2);
		inds.fitnessScaling = K / competition;
	}
}
late() {
	i2.evaluate();
}
