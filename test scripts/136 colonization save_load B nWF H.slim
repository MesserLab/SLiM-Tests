// colonization save_load B nWF H.slim : ^### (.+) ###$
//
// Test .trees file save/load
//
initialize() {
    defineConstant("seed", getSeed());
    initializeSLiMModelType("nonWF");
    initializeTreeSeq();
    //initializeSex("A");
    defineConstant("K", 50);     // carrying capacity per subpop
    defineConstant("N", 10);     // number of subpopulations
    defineConstant("m", 0.01);   // migration rate
    defineConstant("e", 0.1);    // subpopulation extinction rate
    
    initializeMutationType("m1", 0.5, "f", 0.0);
    m1.convertToSubstitution = T;
    
    initializeGenomicElementType("g1", m1, 1.0);
    initializeGenomicElement(g1, 0, 99999);
    initializeMutationRate(1e-7);
    initializeRecombinationRate(1e-8);
}
reproduction() {
    subpop.addCrossed(individual, subpop.sampleIndividuals(1));
}
1 early() {
    for (i in 1:N)
        sim.addSubpop(i, (i == 1) ? 10 else 0);
    sim.setValue("iter", 0);
}
1000 early() {
    catn("SAVING...");
    sim.treeSeqOutput("/tmp/slim_trees_test.trees", _binary=T);
    setSeed(seed + 1);
}
2000 early() {
    s = sum(sim.mutationCounts(NULL) + sim.substitutions.size());
    catn("s == " + s);
    if (sim.getValue("iter") == 0)
    {
        catn("RESTARTING...");
        sim.setValue("s", s);
        sim.setValue("iter", 1);
        sim.readFromPopulationFile("/tmp/slim_trees_test.trees");
        setSeed(seed + 1);
    }
    else
    {
        if (s == sim.getValue("s"))
            catn("### " + s + " ###");
        else
            catn("### NOT EQUAL ###");
    }
}
early() {
    // random migration
    nIndividuals = sum(sim.subpopulations.individualCount);
    nMigrants = rpois(1, nIndividuals * m);
    migrants = sample(sim.subpopulations.individuals, nMigrants);
    
    for (migrant in migrants)
    {
        do dest = sample(sim.subpopulations, 1);
        while (dest == migrant.subpopulation);
        
        dest.takeMigrants(migrant);
    }
    
    // density-dependence and random extinctions
    extant_count = sum(sapply(sim.subpopulations, "applyValue.individualCount > 0;"));
    
    for (subpop in sim.subpopulations)
    {
        if ((extant_count > 1) & (runif(1) < e))
        {   extant_count = extant_count - 1;
            subpop.fitnessScaling = 0.0;
        }
        else
            subpop.fitnessScaling = K / subpop.individualCount;
    }
}
late() {
    if (sum(sim.subpopulations.individualCount) == 0)
        stop("Global extinction in generation " + sim.generation + ".");
}
