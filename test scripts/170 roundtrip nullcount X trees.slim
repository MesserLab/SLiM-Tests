// roundtrip nullcount X trees.slim : ^### (.+) ###$
//
// Test round-trip file save/load (X chromosomes, trees from outputTreeSeq())
// The goal here is to ensure that null genomes round-trip correctly
//
initialize() {
	defineConstant("seed", getSeed());
	initializeTreeSeq(simplificationInterval=250);
	initializeSex("X");
	initializeMutationRate(1e-7);
	initializeMutationType("m1", 0.5, "f", 0.0);
	initializeGenomicElementType("g1", m1, 1.0);
	initializeGenomicElement(g1, 0, 99999);
	initializeRecombinationRate(1e-8);
}
1 early() {
	sim.addSubpop("p1", 500);
	sim.setValue("iter", 0);
}
2000 late() {
	catn("SAVING...");
	defineConstant("countNull1", sum(sim.subpopulations.haplosomes.isNullHaplosome));
	catn(countNull1 + " null genomes at save...");
	sim.treeSeqOutput("/tmp/slim_test_roundtrip.trees");
	setSeed(seed + 1);
}
3000 late() {
	s = sum(sim.mutationCounts(NULL));
	catn("s == " + s);
	if (sim.getValue("iter") == 0)
	{
		catn("RESTARTING...");
		sim.setValue("s", s);
		sim.setValue("iter", 1);
		sim.readFromPopulationFile("/tmp/slim_test_roundtrip.trees");
		defineConstant("countNull2", sum(sim.subpopulations.haplosomes.isNullHaplosome));
		catn(countNull2 + " null genomes at restart...");
		setSeed(seed + 1);
	}
	else
	{
		if (countNull1 != countNull2)
			catn("### " + countNull1 + " != " + countNull2 + " ###");
		else if (s == sim.getValue("s"))
			catn("### " + s + " ###");
		else
			catn("### NOT EQUAL ###");
	}
}
